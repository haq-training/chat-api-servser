# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type ConTact {
    friendId: Int
    typeRelationship: Int
}

type Mutation {
    ChangePassword(input: changePasswordInput): SuccessResponse!
    addFriend(id: ID!): SuccessResponse!
    delete_user(id: ID!): SuccessResponse!
    register(input: CreateUserInput!): User!
    unFriend(id: ID!): SuccessResponse!
    updateUser(input: UpdateUserInput!): SuccessResponse!
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type Query {
    login(input: UserLoginInput!): UserLoginResponse!
    user(id: ID!): User!
    users: [User]
}

type User {
    avatarUrl: String
    createdAt: Date
    email: String!
    firstName: String!
    id: Int!
    lastName: String!
    location: String
    role: Int!
    status: Boolean
    story: String
    updatedAt: Date
}

type UserLoginResponse {
    contact: ConTact!
    token: String!
    user: User!
}

enum SuccessResponse {
    success
}

scalar Cursor

scalar Date

scalar JSON

scalar Upload

input CreateUserInput {
    avatarUrl: Upload
    email: String!
    firstName: String!
    lastName: String!
    location: String
    password: String!
    role: Int!
    story: String
}

input PaginationInput {
    after: Cursor
    before: Cursor
    first: Int
    last: Int
}

input UpdateUserInput {
    avatar: Upload
    firstName: String
    id: Int!
    lastName: String
    location: String
    story: String
}

input UserLoginInput {
    account: String!
    password: String!
}

input changePasswordInput {
    email: String!
}
