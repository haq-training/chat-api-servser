extend type Query {
    users: [User]
    user(id:ID!): User!
    login(input: UserLoginInput!): UserLoginResponse!
}

extend type Mutation {
    register(input: CreateUserInput!): User!
    updateUser(input:UpdateUserInput!):SuccessResponse!
    upRoleUser(id:ID!):SuccessResponse!
    addFriend(id:ID!):SuccessResponse!
    unFriend(id:ID!):SuccessResponse!
    ChangePassword(input : changePasswordInput):SuccessResponse!
    delete_user(id:ID!):SuccessResponse!
}

type User {
    id: Int!
    email: String!
    firstName: String!
    lastName: String!
    avatarUrl: String
    status: Boolean
    location: String
    story: String
    role: Int!
    createdAt: Date
    updatedAt: Date
}
input UpdateUserInput{
    id : Int!
    firstName: String
    lastName: String
    avatar: Upload
    location: String
    story: String
}
input CreateUserInput {
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    role: Int!
    location: String
    story: String
    avatarUrl: Upload
}
input UserLoginInput {
    account: String!
    password: String!
}
input changePasswordInput {
    email: String!
}
type UserLoginResponse {
    token: String!
    user: User!
}